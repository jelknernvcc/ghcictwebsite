
TITLE - Data Structures Using C, 2/e

AUTHOR - Reema Thareja


CHAPTER 14 - SEARCHING AND SORTING

**********************************************************************************************************

1. Write a program to search an element in an array using the linear search technique.
#include <stdio.h>
#include <conio.h>
int main()
{
int arr[10], num, i, n, found = 0, pos = –1;
clrscr();
printf("\n Enter the number of elements in the array : ");
scanf("%d", &n);
printf("\n Enter the elements:");
for(i=0;i<n;i++)
{
scanf("%d", &arr[i]);
}
printf("\n Enter the number that has to be searched : ");
scanf("%d", &num);
for(i=0;i<n;i++)
{
if(arr[i] == num)
{
found =1;
pos=i;
printf("\n %d is found in the array at position = %d", num,i);
break;
}
}
if (found == 0)
printf("\n %d does not exist in the array", num);
getch();
return 0;
}


**************************************************************************************************************

2. Write a program to search an element in an array using binary search.
#include <stdio.h>
#include <conio.h>
int main()
{
int arr[10], num, i, n, beg, end, mid, found =0;
clrscr();
printf("\n Enter the number of elements in the array : ");
scanf("%d", &n);
printf("\n Enter the elements:");
for(i=0;i<n;i++)
{
scanf("%d", &arr[i]);
}
printf("\n Enter the number that has to be searched : ");
scanf("%d", &num);
beg = 0, end = n–1;
while(beg<=end)
{
mid = (beg + end)/2;
if (arr[mid] == num)
{
printf("\n %d is present in the array at position = %d", num, mid);
found =1;
break;
}
else if (arr[mid]>num)
end = mid–1;
else
beg = mid+1;
}
if (beg > end && found == 0)
printf("\n %d does not exist in the array", num);
getch();
return 0;
}

************************************************************************************************************

3. Write a program to search an element in an array using interpolation search.
#include <stdio.h>
#include <conio.h>
#define MAX 20
int interpolation_search(int a[], int low, int high, int val)
{
int mid;
while(low <= high)
{
mid = low + (high – low)*((val – a[low]) / (a[high] – a[low]));
if(val == a[mid])
return mid;
if(val < a[mid])
high = mid – 1;
else
low = mid + 1;
}
return –1;
}
int main()
{
int arr[MAX], i, n, val, pos;
clrscr();
printf("\n Enter the number of elements in the array : ");
scanf("%d", &n);
printf("\n Enter the elements : ");
for(i = 0; i <n; i++)
scanf("%d", &arr[i]);
printf("\n Enter the value to be searched : ");
scanf("%d", &val);
pos = interpolation_search(arr, 0, n–1, val);
if(pos == –1)
printf("\n %d is not found in the array", val);
else
printf("\n %d is found at position %d", val, pos);
getche();
return 0;
}

************************************************************************************************************

4. Write a program to search an element in an array using jump search.
#include <stdio.h>
#include <math.h>
#include <conio.h>
#define MAX 20
int jump_search(int a[], int low, int high, int val, int n)
{
int step, i;
step = sqrt(n);
for(i=0;i<step;i++)
{
if(val < a[step])
high = step – 1;
else
low = step + 1;
}
for(i=low;i<=high;i++)
{
if(a[i]==val)
return i;
}
return –1;
}
int main()
{
int arr[MAX], i, n, val, pos;
clrscr();
printf("\n Enter the number of elements in the array : ");
scanf("%d", &n);
printf("\n Enter the elements : ");
for(i = 0; i <n; i++)
scanf("%d", &arr[i]);
printf("\n Enter the value to be searched : ");
scanf("%d", &val);
pos = jump_search(arr, 0, n–1, val, n);
if(pos == –1)
printf("\n %d is not found in the array", val);
else
printf("\n %d is found at position %d", val, pos);
getche();
return 0;
}

*************************************************************************************************************

5. Write a program to enter n numbers in an array. Redisplay the array with elements being
sorted in ascending order.
#include <stdio.h>
#include <conio.h>
int main()
{
int i, n, temp, j, arr[10];
clrscr();
printf("\n Enter the number of elements in the array : ");
scanf("%d", &n);
printf("\n Enter the elements: ");
for(i=0;i<n;i++)
{
scanf("%d", &arr [i]);
}
for(i=0;i<n;i++)
{
for(j=0;j<n–i–1;j++)
{
if(arr[j] > arr[j+1])
{
temp = arr[j];
arr[j] = arr[j+1];
arr[j+1] = temp;
}
}
}
printf("\n The array sorted in ascending order is :\n");
for(i=0;i<n;i++)
printf("%d\t", arr[i]);
getch();
return 0;
}


************************************************************************************************************

6. Write a program to sort an array using insertion sort algorithm.
#include <stdio.h>
#include <conio.h>
void insertion_sort(int arr[], int n);
void main()
{
int arr[10], i, n;
clrscr();
printf("\n Enter the number of elements in the array : ");
scanf("%d", &n);
printf("\n Enter the elements of the array ");
for(i=0;i<n;i++)
{
scanf("%d", &arr[i]);
}
insertion_sort(arr, n);
printf("\n The sorted array is : \n");
for(i=0;i<n;i++)
printf("%d\t", arr[i]);
getch();
}
void insertion_sort(int arr[], int n)
{
int i, j, temp;
for(i=1;i<n;i++)
{
temp = arr[i];
j = i–1;
while((temp < arr[j]) && (j>=0))
{
arr[j+1] = arr[j];
j––;
}
arr[j+1] = temp;
}
}

***********************************************************************************************************

7. Write a program to sort an array using selection sort algorithm.
#include <stdio.h>
#include <conio.h>
int smallest(int arr[], int k, int n);
void selection_sort(int arr[], int n);
void main()
{
int arr[10], i, n;
clrscr();
printf("\n Enter the number of elements in the array : ");
scanf("%d", &n);
printf("\n Enter the elements of the array ");
for(i=0;i<n;i++)
{
scanf("%d", &arr[i]);
}
selection_sort(arr, n);
printf("\n The sorted array is : \n");
for(i=0;i<n;i++)
printf("%d\t", arr[i]);
getch();
}
int smallest(int arr[], int k, int n)
{
int pos = k, small=arr[k], i;
for(i=k+1;i<n;i++)
{
if(arr[i]< small)
{
small = arr[i];
pos = i;
}
}
return pos;
}
void selection_sort(int arr[],int n)
{
int k, pos, temp;
for(k=0;k<n;k++)
{
pos = smallest(arr, k, n);
temp = arr[k];
arr[k] = arr[pos];
arr[pos] = temp;
}
}

************************************************************************************************************

8. Write a program to implement merge sort.
#include <stdio.h>
#include <conio.h>
void merge(int a[], int, int, int);
void merge_sort(int a[],int, int);
void main()
{
int arr[10], i, n;
clrscr();
printf("\n Enter the number of elements in the array : ");
scanf("%d", &n);
printf("\n Enter the elements of the array ");
for(i=0;i<n;i++)
{
scanf("%d", &arr[i]);
}
merge_sort(arr, 0, n–1);
printf("\n The sorted array is : \n");
for(i=0;i<n;i++)
printf("%d\t", arr[i]);
getch();
}
void merge(int arr[], int beg, int mid, int end)
{
int i=beg, j=mid+1, index=beg, temp[10], k;
while((i<=mid) && (j<=end))
{
if(arr[i] < arr[j])
{
temp[index] = arr[i];
i++;
}
else
{
temp[index] = arr[j];
j++;
}
index++;
}
if(i>mid)
{
while(j<=end)
{
temp[index] = arr[j];
j++;
index++;
}
}
else
{
while(i<=mid)
{
temp[index] = arr[i];
i++;
index++;
}
}
for(k=beg;k<index;k++)
arr[k] = temp[k];
}
void merge_sort(int arr[], int beg, int end)
{
int mid;
if(beg<end)
{
mid = (beg+end)/2;
merge_sort(arr, beg, mid);
merge_sort(arr, mid+1, end);
merge(arr, beg, mid, end);
}
}

*************************************************************************************************************

9. Write a program to implement quick sort algorithm.
#include <stdio.h>
#include <conio.h>
int partition(int a[], int beg, int end);
void quick_sort(int a[], int beg, int end);
void main()
{
int arr[10], i, n;
clrscr();
printf("\n Enter the number of elements in the array : ");
scanf("%d", &n);
printf("\n Enter the elements of the array ");
for(i=0;i<n;i++)
{
scanf("%d", &arr[i]);
}
quick_sort(arr, 0, n–1);
printf("\n The sorted array is : \n");
for(i=0;i<n;i++)
printf("%d\t", arr[i]);
getch();
}
int partition(int a[], int beg, int end)
{
int left, right, temp, loc, flag;
loc = left = beg;
right = end;
flag = 0;
while(flag != 1)
{
while((a[loc] <= a[right]) && (loc!=right))
right––;
if(loc==right)
flag =1;
else if(a[loc]>a[right])
{
temp = a[loc];
a[loc] = a[right];
a[right] = temp;
loc = right;
}
if(flag!=1)
{
while((a[loc] >= a[left]) && (loc!=left))
left++;
if(loc==left)
flag =1;
else if(a[loc] <a[left])
{
temp = a[loc];
a[loc] = a[left];
a[left] = temp;
loc = left;
}
}
}
return loc;
}
void quick_sort(int a[], int beg, int end)
{
int loc;
if(beg<end)
{
loc = partition(a, beg, end);
quick_sort(a, beg, loc–1);
quick_sort(a, loc+1, end);
}
}

************************************************************************************************************

10. Write a program to implement radix sort algorithm.
#include <stdio.h>
#include <conio.h>
int largest(int arr[], int n);
void radix_sort(int arr[], int n);
void main()
{
int arr[10], i, n;
clrscr();
printf("\n Enter the number of elements in the array : ");
scanf("%d", &n);
printf("\n Enter the elements of the array ");
for(i=0;i<n;i++)
{
scanf("%d", &arr[i]);
}
radix_sort(arr, n);
printf("\n The sorted array is : \n");
for(i=0;i<n;i++)
printf("%d\t", arr[i]);
getch();
}
int largest(int arr[], int n)
{
int large=arr[0], i;
for(i=1;i<n;i++)
{
if(arr[i]>large)
large = arr[i];
}
return large;
}
void radix_sort(int arr[], int n)
{
int bucket[10][10], bucket_count[10];
int i, j, k, remainder, NOP=0, divisor=1, large, pass;
large = largest(arr, n);
while(large>0)
{
NOP++;
large/=10;
}
for(pass=0;pass<NOP;pass++) // Initialize the buckets
{
for(i=0;i<10;i++)
bucket_count[i]=0;
for(i=0;i<n;i++)
{
// sort the numbers according to the digit at passth place
remainder = (arr[i]/divisor)%10;
bucket[remainder][bucket_count[remainder]] = arr[i];
bucket_count[remainder] += 1;
}
// collect the numbers after PASS pass
i=0;
for(k=0;k<10;k++)
{
for(j=0;j<bucket_count[k];j++)
{
arr[i] = bucket[k][j];
i++;
}
}
divisor *= 10;
}
}

************************************************************************************************************

11. Write a program to implement heap sort algorithm.
#include <stdio.h>
#include <conio.h>
#define MAX 10
void RestoreHeapUp(int *,int);
void RestoreHeapDown(int*,int,int);
int main()
{
int Heap[MAX],n,i,j;
clrscr();
printf("\n Enter the number of elements : ");
scanf("%d",&n);
printf("\n Enter the elements : ");
for(i=1;i<=n;i++)
{
scanf("%d",&Heap[i]);
RestoreHeapUp(Heap, i); // Heapify
}
// Delete the root element and heapify the heap
j=n;
for(i=1;i<=j;i++)
{
int temp;
temp=Heap[1];
Heap[1]= Heap[n];
Heap[n]=temp;
n = n–1; // The element Heap[n] is supposed to be deleted
RestoreHeapDown(Heap,1,n); // Heapify
}
n=j;
printf("\n The sorted elements are: ");
for(i=1;i<=n;i++)
printf("%4d",Heap[i]);
return 0;
}
void RestoreHeapUp(int *Heap,int index)
{
int val = Heap[index];
while( (index>1) && (Heap[index/2] < val) ) // Check parent's value
{
Heap[index]=Heap[index/2];
index /= 2;
}
Heap[index]=val;
}
void RestoreHeapDown(int *Heap,int index,int n)
{
int val = Heap[index];
int j=index*2;
while(j<=n)
{
if( (j<n) && (Heap[j] < Heap[j+1]))// Check sibling's value
j++;
if(Heap[j] < Heap[j/2]) // Check parent's value
break;
Heap[j/2]=Heap[j];
j=j*2;
}
Heap[j/2]val;
}

************************************************************************************************************

12. Write a program to implement shell sort algorithm.
#include<stdio.h>
void main()
{
int arr[10]={–1};
int i, j, n, flag = 1, gap_size, temp;
printf("\n Enter the number of elements in the array : ");
scanf("%d", &n);
printf("\n Enter %d numbers : ");
for(i=0;i<n;i++)
scanf("%d", &arr[i]);
gap_size = n;
while(flag == 1 || gap_size > 1)
{
flag = 0;
gap_size = (gap_size + 1) / 2;
for(i=0; i< (n – gap_size); i++)
{
if( arr[i+gap_size] < arr[i])
{
temp = arr[i+gap_size];
arr[i+gap_size] = arr[i];
arr[i] = temp;
flag = 0;
}
}
}
printf("\n The sorted array is : \n");
for(i=0;i<n;i++)
printf("%d\t", arr[i]);

************************************************************************************************************

13. Write a program to implement tree sort algorithm.
#include <stdio.h>
#include <conio.h>
#include <alloc.h>
struct tree
{
struct tree *left;
int num;
struct tree *right;
} ;
void insert (struct tree **, int);
void inorder (struct tree *);
void main( )
{
struct tree *t ;
int arr[10];
int i ;
clrscr( ) ;
printf("\n Enter 10 elements : ");
for(i=0;i<10;i++)
scanf("%d", &arr[i]);
t = NULL ;
printf ("\n The elements of the array are : \n" ) ;
for (i = 0 ; i <10 ; i++)
printf ("%d\t", arr[i]) ;
for (i = 0 ; i <10 ; i++)
insert (&t, arr[i]) ;
printf ("\n The sorted array is : \n") ;
inorder (t ) ;
getche( ) ;
}
void insert (struct tree **tree_node, int num)
{
if ( *tree_node == NULL )
{
*tree_node = malloc (sizeof ( struct tree )) ;
( *tree_node ) –> left = NULL ;
( *tree_node ) –> num = num ;
( *tree_node ) –> right = NULL ;
}
else
{
if ( num < ( *tree_node ) –> num )
insert ( &( ( *tree_node ) –> left ), num ) ;
else
insert ( &( ( *tree_node ) –> right ), num ) ;
}
}
void inorder (struct tree *tree_node )
{
if ( tree_node != NULL )
{
inorder ( tree_node –> left ) ;
printf ( "%d\t", tree_node –> num ) ;
inorder ( tree_node –> right ) ;
}
}

*************************************************************************************************************