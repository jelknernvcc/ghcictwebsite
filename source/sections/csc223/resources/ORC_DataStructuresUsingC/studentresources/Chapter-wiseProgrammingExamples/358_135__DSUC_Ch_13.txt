
TITLE - Data Structures Using C, 2/e

AUTHOR - Reema Thareja



cHAPTER 13 - GRAPHS

*************************************************************************************************************

1. Write a program to create a graph of n vertices using an adjacency list. Also write the
code to read and print its information and finally to delete the graph.
#include <stdio.h>
#include <conio.h>
#include <alloc.h>
struct node
{
char vertex;
struct node *next;
};
struct node *gnode;
void displayGraph(struct node *adj[], int no_of_nodes);
void deleteGraph(struct node *adj[], int no_of_nodes);
void createGraph(struct node *adj[], int no_of_nodes);
int main()
{
struct node *Adj[10];
int i, no_of_nodes;
clrscr();
printf("\n Enter the number of nodes in G: ");
scanf("%d", &no_of_nodes);
for(i = 0; i < no_of_nodes; i++)
Adj[i] = NULL;
createGraph(Adj, no_of_nodes);
printf("\n The graph is: ");
displayGraph(Adj, no_of_nodes);
deleteGraph(Adj, no_of_nodes);
getch();
return 0;
}
void createGraph(struct node *Adj[], int no_of_nodes)
{
struct node *new_node, *last;
int i, j, n, val;
for(i = 0; i < no_of_nodes; i++)
{
last = NULL;
printf("\n Enter the number of neighbours of %d: ", i);
scanf("%d", &n);
for(j = 1; j <= n; j++)
{
printf("\n Enter the neighbour %d of %d: ", j, i);
scanf("%d", &val);
new_node = (struct node *) malloc(sizeof(struct node));
new_node –> vertex = val;
new_node –> next = NULL;
if (Adj[i] == NULL)
Adj[i] = new_node;
else
last –> next = new_node;
last = new_node
}
}
}
void displayGraph (struct node *Adj[], int no_of_nodes)
{
struct node *ptr;
int i;
for(i = 0; i < no_of_nodes; i++)
{
ptr = Adj[i];
printf("\n The neighbours of node %d are:", i);
while(ptr != NULL)
{
printf("\t%d", ptr –> vertex);
ptr = ptr –> next;
}
}
}
void deleteGraph (struct node *Adj[], int no_of_nodes)
{
int i;
struct node *temp, *ptr;
for(i = 0; i <= no_of_nodes; i++)
{
ptr = Adj[i];
while(ptr ! = NULL)
{
temp = ptr;
ptr = ptr –> next;
free(temp);
}
Adj[i] = NULL;
}
}

*********************************************************************************************************

2. Write a program to implement the breadth-first search algorithm.
#include <stdio.h>
#define MAX 10
void breadth_first_search(int adj[][MAX],int visited[],int start)
{
int queue[MAX],rear = –1,front =– 1, i;
queue[++rear] = start;
visited[start] = 1;
while(rear != front)
{
start = queue[++front];
if(start == 4)
printf("5\t");
else
printf("%c \t",start + 65);
for(i = 0; i < MAX; i++)
{
if(adj[start][i] == 1 && visited[i] == 0)
{
queue[++rear] = i;
visited[i] = 1;
}
}
}
}
int main()
{
int visited[MAX] = {0};
int adj[MAX][MAX], i, j;
printf("\n Enter the adjacency matrix: ");
for(i = 0; i < MAX; i++)
for(j = 0; j < MAX; j++)
scanf("%d", &adj[i][j]);
breadth_first_search(adj,visited,0);
return 0;
}


*************************************************************************************************************

3. Write a program to implement the depth-first search algorithm.
#include <stdio.h>
#define MAX 5
void depth_first_search(int adj[][MAX],int visited[],int start)
{
int stack[MAX];
int top = –1, i;
printf("%c–",start + 65);
visited[start] = 1;
stack[++top] = start;
while(top ! = –1)
{
start = stack[top];
for(i = 0; i < MAX; i++)
{
if(adj[start][i] && visited[i] == 0)
{
stack[++top] = i;
printf("%c–", i + 65);
visited[i] = 1;
break;
}
}
if(i == MAX)
top––;
}
}
int main()
{
int adj[MAX][MAX];
int visited[MAX] = {0}, i, j;
printf("\n Enter the adjacency matrix: ");
for(i = 0; i < MAX; i++)
for(j = 0; j < MAX; j++)
scanf("%d", &adj[i][j]);
printf("DFS Traversal: ");
depth_first_search(adj,visited,0);
printf("\n");
return 0;
}


************************************************************************************************************

4. Write a program to implement topological sorting.
#include <stdio.h>
#include <conio.h>
#define MAX 10
int n,adj[MAX][MAX];
int front = –1,rear = –1,queue[MAX];
void create_graph(void);
void display();
void insert_queue(int);
int delete_queue(void);
int find_indegree(int);
void main()
{
int node,j = 0,del_node, I;
int topsort[MAX],indeg[MAX];
create_graph();
printf("\n The adjacency matrix is:");
display();
/*Find the in–degree of each node*/
for(node = 1; node <= n; node++)
{
indeg[node] = find_indegree(node);
if( indeg[node] == 0 )
insert_queue(node);
}
while(front <= rear) /*Continue loop until queue is empty */
{
del_node = delete_queue();
topsort[j] = del_node; /*Add the deleted node to topsort*/
j++;
/*Delete the del_node edges */
for(node = 1; node <= n; node++)
{
if(adj[del_node][node] == 1 )
{
adj[del_node][node] = 0;
indeg[node] = indeg[node] – 1;
if(indeg[node] == 0)
insert_queue(node);
}
}
}
printf("The topological sorting can be given as :\n");
for(node=0;i<j;node++)
printf("%d ",topsort[node]);
}
void create_graph()
{
int i,max_edges,org,dest;
printf("\n Enter the number of vertices: ");
scanf("%d",&n);
max_edges = n*(n – 1);
for(i = 1; i <= max_edges; i++)
{
printf("\n Enter edge %d(0 to quit): ",i);
scanf("%d %d",&org,&dest);
if((org == 0) && (dest == 0))
break;
if( org > n || dest > n || org <= 0 || dest <= 0)
{
printf("\n Invalid edge");
i––;
}
else
adj[org][dest] = 1;
}
}
void display()
{
int i,j;
for(i=1;i<=n;i++)
{
printf("\n");
for(j=1;j<=n;j++)
printf("%3d",adj[i][j]);
}
}
void insert_queue(int node)
{
if (rear==MAX–1)
printf("\n OVERFLOW ");
else
{
if (front == –1) /*If queue is initially empty */
front=0;
queue[++rear] = node ;
}
}
int delete_queue()
{
int del_node;
if (front == –1 || front > rear)
{
printf("\n UNDERFLOW ");
return ;
}
else
{
del_node = queue[front++];
return del_node;
}
}
int find_indegree(int node)
{
int i,in_deg = 0;
for(i = 1; i <= n; i++)
{
if( adj[i][node] == 1 )
in_deg++;
}
return in_deg;
}


*************************************************************************************************************

5. Write a program which finds the cost of a minimum spanning tree.
#include<stdio.h>
#include<conio.h>
#define MAX 10
int adj[MAX][MAX], tree[MAX][MAX], n;
void readmatrix()
{
int i, j;
printf(“\n Enter the number of nodes in the Graph : “);
scanf(“%d”, &n);
printf(“\n Enter the adjacency matrix of the Graph”);
for (i = 1; i <= n; i++)
for (j = 1; j <= n; j++)
scanf(“%d”, &adj[i][j]);
}
int spanningtree(int src)
{
int visited[MAX], d[MAX], parent[MAX];
int i, j, k, min, u, v, cost;
for (i = 1; i <= n; i++)
{
d[i] = adj[src][i];
visited[i] = 0;
parent[i] = src;
}
visited[src] = 1;
cost = 0;
k = 1;
for (i = 1; i < n; i++)
{
min = 9999;
for (j = 1; j <= n; j++)
{
if (visited[j]==0 && d[j] < min)
{
min = d[j];
u = j;
cost += d[u];
}
}
visited[u] = 1;
//cost = cost + d[u];
tree[k][1] = parent[u];
tree[k++][2] = u;
for (v = 1; v <= n; v++)
if (visited[v]==0 && (adj[u][v] < d[v]))
{
d[v] = adj[u][v];
parent[v] = u;
}
}
return cost;
}
void display(int cost)
{
int i;
printf(“\n The Edges of the Mininum Spanning Tree are”);
for (i = 1; i < n; i++)
printf(“ %d %d \n”, tree[i][1], tree[i][2]);
printf(“\n The Total cost of the Minimum Spanning Tree is : %d”, cost);
}
main()
{
int source, treecost;
readmatrix();
printf(“\n Enter the Source : “);
scanf(“%d”, &source);
treecost = spanningtree(source);
display(treecost);
return 0;
}


***********************************************************************************************************

6. Write a program to implement Warshall’s algorithm to find the path matrix.
#include <stdio.h>
#include <conio.h>
void read (int mat[5][5], int n);
void display (int mat[5][5], int n);
void mul(int mat[5][5], int n);
int main()
{
int adj[5][5], P[5][5], n, i, j, k;
clrscr();
printf("\n Enter the number of nodes in the graph : ");
scanf("%d", &n);
printf("\n Enter the adjacency matrix : ");
read(adj, n);
clrscr();
printf("\n The adjacency matrix is : ");
display(adj, n);
for(i=0;i<n;i++)
{
for(j=0;j<n;j++)
{
if(adj[i][j] == 0)
P[i][j] = 0;
else
P[i][j] = 1;
}
}
for(k=0; k<n;k++)
{
for(i=0;i<n;i++)
{
for(j=0;j<n;j++)
P[i][j] = P[i][j] | ( P[i][k] & P[k][j]);
}
}
printf("\n The Path Matrix is :");
display (P, n);
getch();
return 0;
}
void read(int mat[5][5], int n)
{
int i, j;
for(i=0;i<n;i++)
{
for(j=0;j<n;j++)
{
printf("\n mat[%d][%d] = ", i, j);
scanf("%d", &mat[i][j]);
}
}
}
void display(int mat[5][5], int n)
{
int i, j;
for(i=0;i<n;i++)
printf("\n");
for(j=0;j<n;j++)
printf("%d\t", mat[i][j]);
}
}


***********************************************************************************************************

7. Write a program to implement Warshall’s modified algorithm to find the shortest path.
#include <stdio.h>
#include <conio.h>
#define INFINITY 9999
void read (int mat[5][5], int n);
void display(int mat[5][5], int n);
int main()
{
int adj[5][5], Q[5][5], n, i, j, k;
clrscr();
printf("\n Enter the number of nodes in the graph : ");
scanf("%d", &n);
printf("\n Enter the adjacency matrix : ");
read(adj, n);
clrscr();
printf("\n The adjacency matrix is : ");
display(adj, n);
for(i=0;i<n;i++)
{
for(j=0;j<n;j++)
{
if(adj[i][j] == 0)
Q[i][j] = INFINITY;
else
Q[i][j] = adj[i][j];
}
}
for(k=0; k<n;k++)
{
for(i=0;i<n;i++)
{
for(j=0;j<n;j++)
{
if(Q[i][j] <= Q[i][k] + Q[k][j])
Q[i][j] = Q[i][j];
else
Q[i][j] = Q[i][k] + Q[k][j];
}
}
printf("\n\n");
display(Q, n);
}
getch();
return 0;
}
void read(int mat[5][5], int n)
{
int i, j;
for(i=0;i<n;i++)
{
for(j=0;j<n;j++)
{
printf("\n mat[%d][%d] = ", i, j);
scanf("%d", &mat[i][j]);
}
}
}
void display(int mat[5][5], int n)
{
int i, j;
for(i=0;i<n;i++)
{printf("\n");
for(j=0;j<n;j++)
printf("%d\t", mat[i][j]);
}
}


***********************************************************************************************************
